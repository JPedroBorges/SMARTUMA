import AnnotationInterface from'./annotation-interface';import mergeDeepRight from'ramda/src/mergeDeepRight';import{pluckNumber,pluckBoolean}from'./utils';import AnnotationGroup from'./annotation-group';import CircleAnnotation from'./annotation-circle';import PathAnnotation from'./annotation-path';import RectAnnotation from'./annotation-rect';import PolygonAnnotation from'./annotation-polygon';import ImageAnnotation from'./annotation-image';import TextAnnotation from'./annotation-text';const DEFAULT_SHIFT=0,DEFAULT_IS_VISIBLE=!0,DEFAULT_ANIM_DURATION=1e3;function createAppropriateShape(a){let b;return'circle'===a||'arc'===a?b=new CircleAnnotation:'line'===a||'path'===a?b=new PathAnnotation:'rectangle'===a?b=new RectAnnotation:'polygon'===a?b=new PolygonAnnotation:'image'===a?b=new ImageAnnotation:'text'===a?b=new TextAnnotation:void 0,b}class AnnotationController extends AnnotationInterface{constructor(a={}){super(a),this.groups=[],this.setAttribute(a)}setAttribute(a={}){let b={};b=mergeDeepRight(a,this.rawConfig),this.rawConfig=b,this.config.groupXShift=pluckNumber(b.groupXShift,DEFAULT_SHIFT),this.config.groupYShift=pluckNumber(b.groupYShift,DEFAULT_SHIFT),this.config.isVisible=pluckBoolean(b.isVisible,DEFAULT_IS_VISIBLE),this.config.animConfig.animDuration=pluckNumber(b.animConfig&&b.animConfig.animDuration,DEFAULT_ANIM_DURATION)}createItem(a,b){let c,d;if('group'===a.annotationType)a.groupXShift=pluckNumber(a.groupXShift,this.config.groupXShift),a.groupYShift=pluckNumber(a.groupYShift,this.config.groupYShift),c=new AnnotationGroup(a),this.groups.push(c);else if(d=a.type&&a.type.toLowerCase(),c=createAppropriateShape(d),!c)return;return b instanceof AnnotationGroup?b.attachItem(c):c._setGroupElement(b),c.setAttribute(a),c._setToStore('controller',this),c}attachModule(a){let b=this;a._setToStore('component',b.resolveDependency('component')),a._setToStore('animationManager',b.resolveDependency('animationManager')),a._setToStore('paper',b.resolveDependency('paper')),a._setToStore('smartLabel',b.resolveDependency('smartLabel')),a._setToStore('toolTipController',b.resolveDependency('toolTipController')),a._setToStore('clickFN',b.resolveDependency('clickFN')),a._setToStore('controller',b)}drawItem(a,b){a._setGroupElement(b),a._draw()}retrieveItem(a,b){var c,d,e,f,g,h=this.groups&&this.groups.length;for(c=0;c<h;c++)for(g=this.groups[c],f=g.items&&g.items.length,d=0;d<f;d++)if(e=g.items[d],e.getId()===a)return b&&g.items.splice(d,1),e}retrieveGroup(a,b){var c,d,e=this.groups&&this.groups.length;for(c=0;c<e;c++)if(d=this.groups[c],d.getId()===a)return b&&this.groups.splice(c,1),d}injectDependency(a,b){this._setToStore(a,b)}resolveDependency(a){return this._getFromStore(a)}show(a){super.show(a),this.groups.forEach(b=>{b.show(a),b.items.forEach(b=>{b.show(a)})})}hide(a){super.hide(a),this.groups.forEach(b=>{b.hide(a),b.items.forEach(b=>{b.hide(a)})})}dispose(){let a,b,c,d,e,f;if(this.groups){for(c=this.groups.length,a=c-1;0<=a;a--){for(e=this.groups[a],d=e.items&&e.items.length,b=d-1;0<=b;b--)f=e.items[a],f&&f.dispose();e.items=[],e.dispose()}this.groups=[]}}}export default AnnotationController;