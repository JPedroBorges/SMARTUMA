import{stubFN}from'../lib/lib';import{convertColor,getLightColor,rawRGBtoHEX}from'../lib/lib-graphics';import{mergeConf,SymbolStore}from'./helper';import{ToolBarFactoryHelper}from'./toolBarFactoryHelper';import ComponentInterface from'../../core/component-interface';let UNDEF,BLOCK='block',NONE='none';class SymbolClass extends ComponentInterface{configure(a,b,c,d,e){let f=this.config;f.symbol=a,f._id='TB_SYMBOL'+(c||0),f.node=UNDEF,f.pId=d,f.isPlaintext=b,f.chartId=e,f.conf={btnTextStyle:{"stroke-width":'1px',stroke:'none'}},f.evt={tooltext:UNDEF,click:stubFN,hover:[stubFN,stubFN]}}registerSymbol(a){let b=this.config;SymbolStore.register(b.symbol,a)}_setConfiguaration(a){let b=this.config;b.conf?mergeConf(a,b.conf,!0):b.conf=a}attachEventHandlers(a,b){var c,d=this,e=this.config,f=d.config.evt,g=a.tooltext,h=a.click||stubFN,i=a.hover,j=b&&b.click||stubFN;return c='function'==typeof h?function(){j(),h.apply(d,arguments)}:function(){var a=h.fn,b=h.context,c=(h.args||[]).slice(0);h.hasOwnProperty('context')?c.push(d):b=d,[].push.apply(c,arguments),j(),a.apply(b,c)},g&&(f.tooltext=g),f.click=c,i&&i instanceof Array&&(f.hover=i),e.node&&(e.node.buttonclick(e.evt.click).hover(e.evt.hover[0],e.evt.hover[1]),d.getFromEnv('toolTipController').enableToolTip(e.node,e.evt.tooltext)),this}getLogicalSpace(){let a=this.config;return a=a.conf||a.buttonConfig,{width:a.width*(a.scale||1),height:a.height*(a.scale||1)}}show(){var a=this.config,b=a.node;a.display=BLOCK,b&&b.css({display:BLOCK})}hide(){var a=this.config,b=a.node;a.display=NONE,b&&b.css({display:NONE})}draw(a,b,c){var d,e,f,g,h,i=this.config,j=i.conf||{},k=ToolBarFactoryHelper.getComponentPool(i.chartId),l=k.getKeys(),m=ToolBarFactoryHelper.getOptions(i.chartId).chart,n=m.getFromEnv('animationManager'),o=m.getFromEnv('toolTipController');return i.isPlaintext?f=i.symbol:e=i.symbol,c.idCount!==UNDEF&&(i._id+=c.idCount),h=k.getComponent(i._id,i.pId,l.KEY_BUTTON,!0),d=i.node=h(a,b,f,e,{width:j.width*j.scale,height:j.height*j.scale,r:j.radius,verticalPadding:j.symbolVPadding*j.scale,horizontalPadding:j.symbolHPadding},c.parentLayer).labelcss(i.conf.btnTextStyle),i.display&&i.node.css({display:i.display})&&(i.display=UNDEF),n.setAnimation({el:i.node,attr:{"button-label":f,"button-padding":[j.symbolHPadding,j.symbolVPadding*j.scale],"button-repaint":[a,b,j.width*j.scale,j.height*j.scale,j.radius*j.scale]},state:'updating',component:this,label:'button'}),c.isResize||(j.hoverFill=j.hoverFill?convertColor(j.hoverFill):convertColor(getLightColor(rawRGBtoHEX(j.fill),80)),d.attr({fill:[j.fill,j.labelFill,j.symbolFill,j.hoverFill,!0],stroke:[j.stroke,j.symbolStroke],"stroke-width":[j.strokeWidth,j.symbolStrokeWidth]}).buttonclick(i.evt.click).hover(i.evt.hover[0],i.evt.hover[1]),g=k.getCreationStatus(),!g&&(i.node.unclick(),i.node.buttonclick(i.evt.click))),o.enableToolTip(d,i.evt.tooltext),d.getBBox=function(){return{x:a,y:b,width:j.width*j.scale,height:j.height*j.scale}},d}dispose(){var a=this.config,b=a.node;b&&b.remove(),a.node=UNDEF}}export default SymbolClass;